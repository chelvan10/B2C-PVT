// AUTOGENERATED: Account Page Object - Production Ready - 2025-01-05
import { type Page, type Locator } from '@playwright/test';

export class AccountPage {
  readonly page: Page;
  
  // Smart locators with self-healing capabilities
  private readonly emailInput = () => this.findElement([
    '#email',
    'input[type="email"]',
    '[data-testid="email-input"]',
    'input[name*="email"]'
  ]);
  
  private readonly passwordInput = () => this.findElement([
    '#password', 
    'input[type="password"]',
    '[data-testid="password-input"]',
    'input[name*="password"]'
  ]);
  
  private readonly submitButton = () => this.findElement([
    'button[type="submit"]:has-text("Log in")',
    'button[type="submit"]',
    '[data-testid="login-submit"]',
    'button:has-text("Log in")'
  ]);

  constructor(page: Page) {
    this.page = page;
  }

  // Self-healing element finder
  private async findElement(selectors: string[]): Promise<Locator> {
    for (const selector of selectors) {
      try {
        const element = this.page.locator(selector);
        if (await element.isVisible({ timeout: 2000 })) {
          return element;
        }
      } catch (error) {
        continue;
      }
    }
    throw new Error(`Element not found with selectors: ${selectors.join(', ')}`);
  }

  // Smart navigation with fallbacks
  async navigateToLogin(): Promise<void> {
    const strategies = [
      () => this.page.goto('/login'),
      () => this.page.click('a[href="/login"]'),
      () => this.page.click('text=Sign in')
    ];

    for (const strategy of strategies) {
      try {
        await strategy();
        await this.page.waitForLoadState('domcontentloaded');
        if (this.page.url().includes('login')) return;
      } catch (error) {
        continue;
      }
    }
  }

  // Resilient login method
  async login(email: string, password: string): Promise<void> {
    await this.page.waitForTimeout(2000);
    
    const emailField = await this.emailInput();
    const passwordField = await this.passwordInput();
    const submitBtn = await this.submitButton();

    await emailField.clear();
    await emailField.fill(email);
    await passwordField.clear();
    await passwordField.fill(password);
    
    await this.page.waitForTimeout(1000);
    await submitBtn.click();
    
    try {
      await this.page.waitForLoadState('networkidle', { timeout: 10000 });
    } catch {
      await this.page.waitForLoadState('domcontentloaded', { timeout: 5000 });
    }
  }

  // Smart authentication validation
  async isAuthenticated(): Promise<boolean> {
    const indicators = [
      () => !this.page.url().includes('/login'),
      () => this.page.locator('text=/my account|logout/i').isVisible({ timeout: 2000 }),
      () => this.page.locator('.user-name, .account-name').isVisible({ timeout: 2000 })
    ];

    for (const indicator of indicators) {
      try {
        if (await indicator()) return true;
      } catch (error) {
        continue;
      }
    }
    return false;
  }
}